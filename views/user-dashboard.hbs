<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>

<body>

    <!-- Navigation -->
    {{> navbar-user}}

    <!-- Hero Section -->
    <section class="user-hero">
        <div class="user-hero-content">
            <!-- Text Content -->
            <div class="user-hero-text">
                <h1 class="user-hero-title">
                    Welcome To Your Sports Store -
                    <span class="user-hero-highlight">{{user.firstName}}!</span>
                </h1>
                <p class="user-hero-subtitle">
                    Discover premium cricket and football equipment with exclusive deals.
                </p>
                <p class="user-hero-description">
                    Simply click <span class="font-semibold"><b>" Add To Cart "</b></span> on any item you like.<br>
                    Track your selections in the cart and checkout when ready!
                </p>
            </div>

            <!-- Image Crossfade Carousel for User Dashboard -->
            <div class="user-hero-image">
                <div class="hero-carousel">
                    <img id="img1"
                        src="https://www.primeparc.in/assets/img/slider/1.jpg"
                        alt="Sports Equipment Store"
                        style="opacity: 1; z-index: 10;"
                        onerror="this.src='https://via.placeholder.com/500x320/059669/ffffff?text=Sports+Equipment+Store'"
                    />
                    <img id="img2"
                        src=""
                        alt="Sports Equipment"
                        style="opacity: 0; z-index: 0;"
                        onerror="this.src='https://via.placeholder.com/500x320/059669/ffffff?text=Sports+Equipment'"
                    />
                </div>
            </div>
        </div>
    </section>
    <script>
        // Hero carousel logic
        const images = [
            "https://www.primeparc.in/assets/img/slider/1.jpg",
            "https://thumbs.dreamstime.com/b/rainy-night-cricket-scene-wet-cricket-field-captures-essence-rainy-night-game-droplets-glisten-creating-dramatic-366031417.jpg",
            "https://breakingglobe.com/wp-content/uploads/2024/08/DALL%C2%B7E-2024-08-16-02.23.54-A-dynamic-and-vibrant-image-depicting-the-excitement-of-both-cricket-and-football.-On-the-left-show-a-cricket-batsman-in-mid-swing-with-a-bowler-del.webp"
        ];

        let current = 0;
        const img1 = document.getElementById("img1");
        const img2 = document.getElementById("img2");

        // Function to preload images
        function preloadImages() {
            images.forEach(src => {
                const img = new Image();
                img.src = src;
            });
        }

        // Function to safely change carousel images
        function changeCarouselImage() {
            const next = (current + 1) % images.length;

            if (img1.style.opacity === "1") {
                img2.src = images[next];
                img2.style.opacity = "1";
                img2.style.zIndex = "10";
                img1.style.opacity = "0";
                img1.style.zIndex = "0";
            } else {
                img1.src = images[next];
                img1.style.opacity = "1";
                img1.style.zIndex = "10";
                img2.style.opacity = "0";
                img2.style.zIndex = "0";
            }

            current = next;
        }

        // Initialize carousel
        document.addEventListener('DOMContentLoaded', function() {
            preloadImages();
            setInterval(changeCarouselImage, 3000); // Changed to 3 seconds for better visibility
        });
        }, 2000);
    </script>


    <!-- Statistics Section -->
    {{> stats}}


    <!-- Product Categories Section -->
    {{> product-categories isAdmin=false}}

    <!-- Featured Products Section -->
    {{> featured-products userDashboard=true}}

    <!-- Sale Section -->
    {{> sale-products userDashboard=true}}

    <!-- Cart Section -->
    {{> cart}}


    <script>
        let cart = [];
        let allProducts = { cricket: [], football: [] };
        let allProductsFlat = [];
        
        // Define hardcoded products (Featured and Sale items)
        const hardcodedProducts = [
            // Featured Products
            {
                _id: 'featured-bat',
                name: 'Professional Cricket Bat Pro',
                description: 'Premium English willow, used by international players',
                price: 4999,
                category: 'cricket',
                image: 'https://admin.thecricketer.com/weblab/sites/96c8b790-b593-bfda-0ba4-ecd3a9fdefc2/resources/images/site/kookaburra_nickel_4.1.jpg',
                section: 'featured'
            },
            {
                _id: 'featured-boots',
                name: 'Elite Football Boots',
                description: 'Professional grade boots with advanced grip technology',
                price: 5999,
                category: 'football',
                image: 'https://preview.free3d.com/img/2010/06/1871863703398254318/o29lvvye.jpg',
                section: 'featured'
            },
            {
                _id: 'featured-kit',
                name: 'Complete Cricket Kit',
                description: 'Everything you need: bat, pads, gloves, helmet',
                price: 8999,
                category: 'cricket',
                image: 'https://5.imimg.com/data5/SELLER/Default/2024/6/424095483/DF/VP/RY/163043379/whatsapp-image-2024-06-01-at-3-26-20-pm-500x500.jpeg',
                section: 'featured'
            },
            // Sale Products
            {
                _id: 'sale-pads',
                name: 'Cricket Batting Pads',
                description: 'Professional grade batting pads',
                price: 1199,
                category: 'cricket',
                image: 'https://a2cricket.com/cdn/shop/files/A2Cricket-CricketBattingPads_7_1400x.jpg?v=1690984808',
                section: 'sale'
            },
            {
                _id: 'sale-football',
                name: 'Professional Football',
                description: 'High-quality match football',
                price: 1299,
                category: 'football',
                image: 'https://contents.mediadecathlon.com/p2571328/bcd3c25846279cde8d74b9996aef2566/p2571328.jpg?format=auto&quality=70&f=2520x0',
                section: 'sale'
            },
            {
                _id: 'sale-gloves',
                name: 'Cricket Batting Gloves',
                description: 'Professional batting gloves',
                price: 629,
                category: 'cricket',
                image: 'https://sportsgoodsmarket.com/wp-content/uploads/2020/12/PRO-5-scaled.jpg',
                section: 'sale'
            },
            {
                _id: 'sale-helmet',
                name: 'Cricket Helmet',
                description: 'Protective cricket helmet',
                price: 974,
                category: 'cricket',
                image: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTFFjrb83_2blLq98U-oonOUB3NSU5JaX3-Dw&s',
                section: 'sale'
            }
        ];

        // Load products from API
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const data = await response.json();
                
                if (data.success) {
                    // Organize products by category
                    allProducts.cricket = data.products.filter(p => p.category === 'cricket');
                    allProducts.football = data.products.filter(p => p.category === 'football');
                    allProductsFlat = data.products;
                    
                    // Add hardcoded products to the flat array for search
                    allProductsFlat = [...allProductsFlat, ...hardcodedProducts];
                    
                    // Display current category
                    const currentCategory = document.getElementById('cricket-products').classList.contains('hidden') ? 'football' : 'cricket';
                    displayProducts(currentCategory);
                } else {
                    console.error('Failed to load products:', data.message);
                    // If API fails, at least include hardcoded products for search
                    allProductsFlat = [...hardcodedProducts];
                }
            } catch (error) {
                console.error('Error loading products:', error);
                // If API fails, at least include hardcoded products for search
                allProductsFlat = [...hardcodedProducts];
            }
        }

        function displayProducts(category) {
            const products = allProducts[category];
            
            if (products.length === 0) {
                const container = document.getElementById(`${category}-grid`);
                container.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <div class="empty-icon">ðŸ“¦</div>
                        <p class="empty-message">No ${category} products available</p>
                        <p class="empty-submessage">Check back later for new arrivals!</p>
                    </div>
                `;
                return;
            }

            // Decide between grid and carousel view
            if (products.length <= 3) {
                showGridView(category, products);
            } else {
                showCarouselView(category, products);
            }
        }

        function showGridView(category, products) {
            const grid = document.getElementById(`${category}-grid`);
            const carousel = document.getElementById(`${category}-carousel`);
            
            // Show grid, hide carousel
            grid.classList.remove('hidden');
            carousel.classList.add('hidden');
            
            grid.innerHTML = products.map(product => createProductCardHTML(product, false)).join('');
        }

        function showCarouselView(category, products) {
            const grid = document.getElementById(`${category}-grid`);
            const carousel = document.getElementById(`${category}-carousel`);
            const carouselItems = document.getElementById(`${category}-carousel-items`);
            
            // Show carousel, hide grid
            carousel.classList.remove('hidden');
            grid.classList.add('hidden');
            
            carouselItems.innerHTML = products.map(product => createProductCardHTML(product, true)).join('');
        }

        function createProductCardHTML(product, isCarousel = false) {
            // Check if product is newly added (within last 24 hours)
            const isNew = product.createdAt && new Date(product.createdAt) > new Date(Date.now() - 24*60*60*1000);
            
            const cardClass = isCarousel ? 'card carousel-card' : 'card';
            const cardExtraClass = isNew ? ' product-card-new' : '';
            
            const newTag = isNew ? 
                `<div class="new-badge">NEW</div>` : '';

            return `
                <div class="${cardClass}${cardExtraClass}" data-product-id="${product._id}">
                    <div class="card-img-container" style="position: relative;">
                        <img src="${product.image}" 
                             alt="${product.name}" 
                             class="card-img"
                             onerror="this.src='https://via.placeholder.com/300x200?text=Image+Not+Found'">
                        ${newTag}
                    </div>
                    <div class="card-body">
                        <h3 class="card-title">${product.name}</h3>
                        <p class="card-description">${product.description}</p>
                        <div class="card-footer">
                            <span class="card-price">â‚¹${product.price}</span>
                            <button onclick="addToCart('${product._id}', '${product.name}', ${product.price})" class="btn btn-primary btn-sm">
                                Add to Cart
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }

        function scrollCarousel(carouselId, direction) {
            const carousel = document.getElementById(carouselId);
            const cardWidth = 280 + 24; // card width + gap
            const scrollAmount = cardWidth * direction;
            carousel.scrollBy({
                left: scrollAmount,
                behavior: 'smooth'
            });
        }

        function showCategory(category) {
            // Update tab styling
            const cricketTab = document.getElementById('cricket-tab');
            const footballTab = document.getElementById('football-tab');
            
            if (category === 'cricket') {
                cricketTab.classList.add('active');
                footballTab.classList.remove('active');
            } else {
                footballTab.classList.add('active');
                cricketTab.classList.remove('active');
            }

            // Show/hide product sections
            const cricketProducts = document.getElementById('cricket-products');
            const footballProducts = document.getElementById('football-products');
            
            if (category === 'cricket') {
                cricketProducts.classList.remove('hidden');
                footballProducts.classList.add('hidden');
            } else {
                footballProducts.classList.remove('hidden');
                cricketProducts.classList.add('hidden');
            }
            
            // Display products for the selected category
            displayProducts(category);
        }

        // Refresh products periodically to sync with admin changes
        function startProductSync() {
            setInterval(async () => {
                await loadProducts();
            }, 30000); // Refresh every 30 seconds
        }

        function addToCart(id, name, price) {
            const existingItem = cart.find(item => item.id === id);
            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                cart.push({ id, name, price, quantity: 1 });
            }
            updateCart();
            showNotification(`${name} added to cart!`);
        }

        function removeFromCart(id) {
            cart = cart.filter(item => item.id !== id);
            updateCart();
        }

        function updateQuantity(id, quantity) {
            const item = cart.find(item => item.id === id);
            if (item) {
                item.quantity = Math.max(1, quantity);
                updateCart();
            }
        }

        function updateCart() {
            const cartCount = document.getElementById('cart-count');
            const cartItems = document.getElementById('cart-items');
            const subtotal = document.getElementById('subtotal');
            const total = document.getElementById('total');
            const checkoutBtn = document.getElementById('checkout-btn');

            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;

            if (cart.length === 0) {
                cartItems.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">ðŸ›’</div>
                        <p class="empty-message">Your cart is empty</p>
                        <p class="empty-submessage">Add some products to get started!</p>
                    </div>
                `;
                checkoutBtn.disabled = true;
            } else {
                cartItems.innerHTML = `
                    <div class="text-center mb-3">
                        <div class="empty-icon">ðŸ›’</div>
                        <h3 class="card-title">View Your Cart</h3>
                        <p class="card-description">Review your selected items</p>
                    </div>
                    ${cart.map(item => `
                        <div class="cart-item">
                            <div class="cart-item-info">
                                <h4 class="cart-item-title">${item.name}</h4>
                                <p class="cart-item-price">â‚¹${item.price}</p>
                            </div>
                            <div class="cart-item-controls">
                                <button onclick="updateQuantity('${item.id}', ${item.quantity - 1})" class="quantity-btn">-</button>
                                <span class="quantity-display">${item.quantity}</span>
                                <button onclick="updateQuantity('${item.id}', ${item.quantity + 1})" class="quantity-btn">+</button>
                                <button onclick="removeFromCart('${item.id}')" class="remove-btn">Remove</button>
                            </div>
                        </div>
                    `).join('')}
                `;
                checkoutBtn.disabled = false;
            }

            const subtotalAmount = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            subtotal.textContent = `â‚¹${subtotalAmount}`;
            total.textContent = `â‚¹${subtotalAmount}`;
        }

        function checkout() {
            if (cart.length === 0) return;

            document.getElementById('success-modal').classList.remove('hidden');
            document.getElementById('success-modal').classList.add('flex');
            cart = [];
            updateCart();
        }

        function closeModal() {
            document.getElementById('success-modal').classList.add('hidden');
            document.getElementById('success-modal').classList.remove('flex');
        }

        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification success';
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 300);
            }, 2000);
        }

        // --- Product Search Logic ---
        const searchInput = document.getElementById('product-search');
        const suggestionsBox = document.getElementById('search-suggestions');

        searchInput.addEventListener('input', function() {
            const query = this.value.trim().toLowerCase();
            if (!query) {
                suggestionsBox.style.display = 'none';
                suggestionsBox.innerHTML = '';
                return;
            }
            
            // Enhanced search - look for matches in name, description, and keywords
            const matches = allProductsFlat.filter(p => {
                const name = p.name.toLowerCase();
                const description = p.description.toLowerCase();
                const category = p.category.toLowerCase();
                
                return name.includes(query) || 
                       description.includes(query) || 
                       category.includes(query) ||
                       // Handle common search terms
                       (query.includes('bat') && (name.includes('bat') || name.includes('cricket'))) ||
                       (query.includes('ball') && (name.includes('ball') || name.includes('football'))) ||
                       (query.includes('boot') && name.includes('boot')) ||
                       (query.includes('pad') && name.includes('pad')) ||
                       (query.includes('glove') && name.includes('glove')) ||
                       (query.includes('helmet') && name.includes('helmet')) ||
                       (query.includes('kit') && name.includes('kit'));
            });
            
            // Sort matches by relevance (exact name matches first)
            matches.sort((a, b) => {
                const aNameMatch = a.name.toLowerCase().includes(query);
                const bNameMatch = b.name.toLowerCase().includes(query);
                if (aNameMatch && !bNameMatch) return -1;
                if (!aNameMatch && bNameMatch) return 1;
                return 0;
            });
            
            if (matches.length === 0) {
                suggestionsBox.innerHTML = '<div class="search-no-results">No products found</div>';
                suggestionsBox.style.display = 'block';
                return;
            }
            
            // Limit to 8 results to avoid overwhelming the user
            const limitedMatches = matches.slice(0, 8);
            
            suggestionsBox.innerHTML = limitedMatches.map(p => {
                // Add category badge for better identification
                const categoryBadge = `<span class="search-category-badge">${p.category}</span>`;
                const sectionBadge = p.section ? `<span class="search-section-badge">${p.section}</span>` : '';
                
                return `<div class="search-suggestion-item" data-id="${p._id}">
                    <img src="${p.image}" alt="${p.name}" class="search-suggestion-image" onerror="this.src='https://via.placeholder.com/40x40?text=No+Image'">
                    <div class="search-suggestion-content">
                        <span class="search-suggestion-text">${p.name}</span>
                        <div class="search-suggestion-badges">
                            ${categoryBadge}
                            ${sectionBadge}
                        </div>
                    </div>
                </div>`;
            }).join('');
            suggestionsBox.style.display = 'block';
        });

        suggestionsBox.addEventListener('click', function(e) {
            console.log('Search suggestion clicked:', e.target);
            const item = e.target.closest('.search-suggestion-item');
            console.log('Found suggestion item:', item);
            
            if (item) {
                const productId = item.getAttribute('data-id');
                console.log('Searching for product with ID:', productId);
                
                // Find the product in our loaded products
                const product = allProductsFlat.find(p => p._id === productId);
                console.log('Found product:', product);
                
                if (product) {
                    console.log('Navigating to product:', product.name);
                    navigateToProduct(product);
                    
                    // Clear search input and hide suggestions
                    searchInput.value = '';
                    suggestionsBox.style.display = 'none';
                    suggestionsBox.innerHTML = '';
                } else {
                    console.error('Product not found in allProductsFlat array');
                    console.log('Available products:', allProductsFlat.map(p => ({id: p._id, name: p.name})));
                }
            } else {
                console.log('No suggestion item found for click target');
            }
        });

        // Prevent search input from losing focus when clicking on suggestions
        suggestionsBox.addEventListener('mousedown', function(e) {
            e.preventDefault();
        });

        // Enhanced navigation function to handle all product types
        function navigateToProduct(product) {
            console.log('=== NAVIGATING TO PRODUCT ===');
            console.log('Product:', product);
            
            const productId = product._id;
            
            // Handle hardcoded products (featured/sale)
            if (product.section) {
                console.log('Navigating to hardcoded product - section:', product.section);
                
                // First scroll to the section
                const section = document.querySelector(`#${product.section}`);
                console.log('Section element found:', section);
                
                if (section) {
                    section.scrollIntoView({
                        behavior: 'smooth'
                    });
                    
                    // Wait for scroll to complete, then find and highlight the product
                    setTimeout(() => {
                        highlightProductCard(productId);
                    }, 800);
                } else {
                    console.error('Section not found:', product.section);
                }
            } else {
                console.log('Navigating to API product - category:', product.category);
                
                // Handle API products - first make sure the category is shown
                const currentCategory = product.category;
                const currentActiveTab = document.querySelector('.category-tab.active');
                console.log('Current active tab:', currentActiveTab);
                
                const currentActiveCategory = currentActiveTab ? currentActiveTab.id.replace('-tab', '') : 'cricket';
                console.log('Current active category:', currentActiveCategory);
                
                // If we need to switch categories
                if (currentActiveCategory !== currentCategory) {
                    console.log('Switching category from', currentActiveCategory, 'to', currentCategory);
                    showCategory(currentCategory);
                    
                    // Wait for category switch and product rendering
                    setTimeout(() => {
                        scrollToProductsAndHighlight(productId);
                    }, 1200); // Increased wait time
                } else {
                    console.log('Already on correct category:', currentCategory);
                    // Already on correct category, just scroll and highlight
                    scrollToProductsAndHighlight(productId);
                }
            }
        }

        // Function to scroll to products section and highlight specific product
        function scrollToProductsAndHighlight(productId) {
            // Scroll to products section first
            const productsSection = document.querySelector('#products');
            if (productsSection) {
                productsSection.scrollIntoView({
                    behavior: 'smooth'
                });
            }
            
            // Wait for scroll to complete, then highlight
            setTimeout(() => {
                highlightProductCard(productId);
            }, 800);
        }

        // Function to find and highlight a product card
        function highlightProductCard(productId) {
            console.log('=== HIGHLIGHTING PRODUCT CARD ===');
            console.log('Looking for product ID:', productId);
            
            // Try to find the product card
            let productCard = findProductCard(productId);
            
            if (productCard) {
                console.log('Found product card:', productCard);
                console.log('Product card classes:', productCard.className);
                
                // Add highlight effect
                productCard.classList.add('product-highlight');
                
                // Scroll to the specific product card
                productCard.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
                
                // Remove highlight after 3 seconds
                setTimeout(() => {
                    productCard.classList.remove('product-highlight');
                }, 3000);
            } else {
                console.error('Product card not found after all attempts:', productId);
                console.log('Available product cards on page:');
                const allCards = document.querySelectorAll('[data-product-id]');
                allCards.forEach(card => {
                    console.log('- Card ID:', card.getAttribute('data-product-id'), 'Title:', card.querySelector('.card-title')?.textContent);
                });
            }
        }

        // Function to find a product card using multiple strategies
        function findProductCard(productId) {
            console.log('=== FINDING PRODUCT CARD ===');
            console.log('Searching for product ID:', productId);
            
            // Strategy 1: Direct search by data-product-id
            let productCard = document.querySelector(`[data-product-id="${productId}"]`);
            if (productCard) {
                console.log('Found product card using direct search');
                return productCard;
            }
            
            // Strategy 2: Search in all possible containers
            const containers = [
                '#cricket-grid',
                '#cricket-carousel-items',
                '#football-grid', 
                '#football-carousel-items',
                '#featured .product-grid',
                '#sale .flash-sale-grid'
            ];
            
            console.log('Searching in containers:', containers);
            
            for (let container of containers) {
                const containerElement = document.querySelector(container);
                console.log(`Container ${container}:`, containerElement);
                
                if (containerElement) {
                    productCard = containerElement.querySelector(`[data-product-id="${productId}"]`);
                    if (productCard) {
                        console.log('Found product card in container:', container);
                        return productCard;
                    }
                }
            }
            
            // Strategy 3: Search by product name (fallback)
            const product = allProductsFlat.find(p => p._id === productId);
            if (product) {
                console.log('Attempting name-based search for:', product.name);
                const allCards = document.querySelectorAll('.card');
                console.log('Total cards found:', allCards.length);
                
                for (let card of allCards) {
                    const titleElement = card.querySelector('.card-title');
                    if (titleElement) {
                        const cardTitle = titleElement.textContent.trim();
                        console.log('Comparing:', cardTitle, 'vs', product.name);
                        
                        if (cardTitle === product.name) {
                            console.log('Found product card by name match');
                            return card;
                        }
                    }
                }
            }
            
            console.log('Product card not found with any strategy');
            return null;
        }

        // Hide suggestions on blur (with delay to allow clicks)
        searchInput.addEventListener('blur', function() {
            // Increased delay to ensure click events are processed
            setTimeout(() => { 
                suggestionsBox.style.display = 'none';
                suggestionsBox.innerHTML = ''; 
            }, 300);
        });

        // Show suggestions on focus if there's a value
        searchInput.addEventListener('focus', function() {
            if (this.value.trim()) {
                // Trigger input event to show suggestions
                this.dispatchEvent(new Event('input'));
            }
        });

        // Clear search on Escape key and add arrow key navigation
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                this.value = '';
                suggestionsBox.style.display = 'none';
                suggestionsBox.innerHTML = '';
                return;
            }
            
            // Handle arrow key navigation
            const suggestions = suggestionsBox.querySelectorAll('.search-suggestion-item');
            if (suggestions.length === 0) return;
            
            const currentActive = suggestionsBox.querySelector('.search-suggestion-item.active');
            let currentIndex = currentActive ? Array.from(suggestions).indexOf(currentActive) : -1;
            
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                currentIndex = (currentIndex + 1) % suggestions.length;
                updateActiveSearchItem(suggestions, currentIndex);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                currentIndex = currentIndex <= 0 ? suggestions.length - 1 : currentIndex - 1;
                updateActiveSearchItem(suggestions, currentIndex);
            } else if (e.key === 'Enter') {
                e.preventDefault();
                if (currentActive) {
                    currentActive.click();
                } else if (suggestions.length > 0) {
                    suggestions[0].click();
                }
            }
        });
        
        // Function to update active search item
        function updateActiveSearchItem(suggestions, activeIndex) {
            suggestions.forEach((item, index) => {
                if (index === activeIndex) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }

        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', async function () {
            console.log('=== PAGE INITIALIZATION ===');
            console.log('Loading products...');
            
            await loadProducts(); // Load products from API
            
            console.log('Products loaded. Total products:', allProductsFlat.length);
            console.log('All products:', allProductsFlat.map(p => ({id: p._id, name: p.name, category: p.category, section: p.section})));
            
            showCategory('cricket'); // Show cricket products by default
            startProductSync(); // Start periodic sync
            
            // Debug: Log all product cards found on page
            console.log('=== DEBUG: ALL PRODUCT CARDS ON PAGE ===');
            setTimeout(() => {
                const allCards = document.querySelectorAll('[data-product-id]');
                console.log('Total product cards found:', allCards.length);
                allCards.forEach(card => {
                    console.log('- Card ID:', card.getAttribute('data-product-id'), 'Title:', card.querySelector('.card-title')?.textContent);
                });
            }, 1000);
        });
    </script>

    <!-- Footer -->
    {{> footer}}

</body>

</html>
